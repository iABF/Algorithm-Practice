#include<iostream>
#include<cmath>
#include<queue>
using namespace std;
int x[105], y[105], z[105], tem[105], n, mek = 0;
struct RE { int s, e; RE(int ss, int ee) { s = ss, e = ee; } };
bool check()
{
	for (int i = 0; i < n; i++)if (x[i] != z[i])return false;
	return true;
}
int findi(int a, int b, int t)
{
	if (x[a] > t)return a;
	if (x[b] < t)return b + 1;
	while (b - a > 1)
	{
		int m = (a + b) >> 1;
		if (x[m] > t)b = m;
		else a = m;
	}
	return b;
}
bool InsertionSort()
{
	bool key = false;
	for (int i = 1; i < n; i++)
	{
		int sp = findi(0, i - 1, x[i]), temp = x[i];
		for (int j = i; j > sp; j--)x[j] = x[j - 1];
		x[sp] = temp;
		if (key)
		{
			cout << "Insertion Sort" << endl;
			for (int i = 0; i < n - 1; i++)cout << x[i] << ' ';
			cout << x[n - 1] << endl;
			return true;
		}
		if (check())key = true;
	}
	return false;
}
void Merge(int s1, int s2, int end)
{
	int k1 = s1, k2 = s2;
	for (int i = s1; i <= end; i++)
	{
		if (k1 >= s2) { for (int j = k2; j <= end; j++)tem[i++] = x[j]; break; }
		if (k2 > end) { for (int j = k1; j < s2; j++)tem[i++] = x[j]; break; }
		if (x[k1] < x[k2])tem[i] = x[k1++];
		else tem[i] = x[k2++];
	}
	for (int i = s1; i <= end; i++)x[i] = tem[i];
}
void MergeSort(int a, int b)
{
	if (b == a)return;
	double mdel = log2f(float(b - a));
	int m = a + ceil(mdel);
	MergeSort(a, m);
	MergeSort(m + 1, b);
	Merge(a, m + 1, b);
}
void MergeCheck()
{
	if (mek == 1)
	{
		cout << "Merge Sort" << endl;
		for (int i = 0; i < n - 1; i++)cout << x[i] << ' ';
		cout << x[n - 1] << endl;
		mek++;
	}
	if (check())mek = 1;
}
void MergeSort2()
{
	queue<RE>q;
	for (int i = 0; i < n; i++)q.push(RE(i, i));
	while (q.size() > 1)
	{
		if (mek > 1)return;
		if (q.size() >= 2)
		{
			RE t1 = q.front(); q.pop();
			if (t1.e == n - 1) { MergeCheck(); q.push(t1); }
			else
			{
				RE t2 = q.front(); q.pop();
				Merge(t1.s, t2.s, t2.e);
				if (t2.e == n - 1)MergeCheck();
				q.push(RE(t1.s, t2.e));
			}
		}
		else
		{
			RE t1 = q.front(); q.pop();
			if (t1.e == n - 1)MergeCheck();
			q.push(t1);
		}
	}
}
int main()
{
	cin >> n;
	for (int i = 0; i < n; i++) { cin >> x[i]; y[i] = x[i]; }
	for (int i = 0; i < n; i++)cin >> z[i];
	if (!InsertionSort())
	{
		for (int i = 0; i < n; i++)x[i] = y[i];
		MergeSort2();
	}
} 