#include<iostream>
#include<stack>
#include<string>
#include<cstdio>
#include<vector>
#include<cmath>
using namespace std;
int pc[128] = { 0 };
double x, y, temp;
string a;
struct PFX
{
	double dbl;
	char c;
	PFX(double w) { dbl = w; c = 0; }
	PFX(char w) { dbl = 0; c = w; }
};
bool flag, dot, num;
int key;
void ini()
{
	pc['+'] = pc['-'] = 1;
	pc['*'] = pc['/'] = pc['%'] = 2;
	pc['^'] = 3;
}
double compute()
{
	vector<PFX>postfix;
	stack<char>func;
	stack<double>val;
	flag = true;
	int d = a.size();
	for (int i = 0; i < d; i++)
	{
		if (i == 0 && a[i] == '-')a = '0' + a, d = a.size();
		else if (a[i] == '-'&&a[i - 1] == '(')a.insert(a.begin() + i - 1, '0'), d = a.size();
	}
	for (int i = 0; i < d; i++)
	{
		if (i == 0 && a[i] == '+')a = '0' + a, d = a.size();
		else if (a[i] == '+'&&a[i - 1] == '(')a.insert(a.begin() + i - 1, '0'), d = a.size();
	}
	for (int i = 0; i < d - 1; i++)	if (((a[i] == '+' || a[i] == '-' || a[i] == '*' || a[i] == '/' || a[i] == '^' || a[i] == '%' || a[i] == '.') && (a[i + 1] == '+' || a[i + 1] == '-' || a[i + 1] == '*' || a[i + 1] == '/' || a[i + 1] == '^' || a[i + 1] == '%' || a[i + 1] == '.')) || (a[i] == '(' && (a[i + 1] == '*' || a[i + 1] == '/' || a[i + 1] == '^' || a[i + 1] == '%' || a[i + 1] == '.')) || ((a[i] == '+' || a[i] == '-' || a[i] == '*' || a[i] == '/' || a[i] == '^' || a[i] == '%' || a[i] == '.') && a[i + 1] == ')') || (a[i] >= '0'&&a[i] <= '9'&&a[i + 1] == '(') || (a[i + 1] >= '0'&&a[i + 1] <= '9'&&a[i] == ')') || (a[i] == ')'&&a[i + 1] == '(')) { flag = false; return 0; }
	for (int i = 0; i < d; i++)
	{
		temp = key = dot = num = 0;
		while ((a[i] >= '0'&&a[i] <= '9') || a[i] == '.')
		{
			num = true;
			if (a[i] != '.')
			{
				if (!dot)temp = temp * 10 + a[i] - '0';
				else temp += (a[i] - '0') * pow(10, -key);
			}
			else if (dot) { flag = false; return 0; }
			else dot = true;
			if (dot)key++;
			i++;
		}
		if (num)postfix.push_back(temp);
		if (i >= d)break;
		if (a[i] == '(')func.push(a[i]);
		else if (a[i] == ')')
		{
			if (func.empty()) { flag = false; return 0; }
			while (func.top() != '(')
			{
				postfix.push_back(func.top());
				func.pop();
				if (func.empty()) { flag = false; return 0; }
			}
			func.pop();
		}
		else if (a[i] == '+' || a[i] == '-' || a[i] == '*' || a[i] == '/' || a[i] == '%')
		{
			while (!func.empty() && pc[func.top()] >= pc[a[i]])
			{
				postfix.push_back(func.top());
				func.pop();
			}
			func.push(a[i]);
		}
		else if (a[i] == '^')func.push(a[i]);
		else { flag = false; return 0; }
	}
	while (!func.empty())
	{
		postfix.push_back(func.top());
		func.pop();
	}
	d = postfix.size();
	for (int i = 0; i < d; i++)
	{
		if (!postfix[i].c)val.push(postfix[i].dbl);
		else if (val.size() < 2) { flag = false; return 0; }
		else if (postfix[i].c == '+' || postfix[i].c == '-' || postfix[i].c == '*' || postfix[i].c == '/' || postfix[i].c == '%' || postfix[i].c == '^')
		{
			x = val.top(); val.pop();
			y = val.top(); val.pop();
			if (postfix[i].c == '+')val.push(x + y);
			else if (postfix[i].c == '-')val.push(y - x);
			else if (postfix[i].c == '*')val.push(x*y);
			else if (postfix[i].c == '^')val.push(pow(y, x));
			else if (postfix[i].c == '/')
			{
				if (!x) { flag = false; return 0; }
				val.push(y / x);
			}
			else if (postfix[i].c == '%')
			{
				if (!x) { flag = false; return 0; }
				if (y != (int)y || x != (int)x) { flag = false; return 0; }
				val.push((double)((int)y % (int)x));
			}
		}
		else { flag = false; return 0; }
	}
	if (val.size() != 1) { flag = false; return 0; }
	return val.top();
}
int main()
{
	ini();
	while (cin >> a)
	{
		double ans = compute();
		printf(flag ? "%.2f\n" : "ERROR IN INFIX NOTATION\n", ans);
	}
}