#include<iostream>
#include<algorithm>
using namespace std;
int N, M, f[105], sum = 0;
struct Road { int a, b, length; }rd[305];
bool cmp(Road x, Road y) { return x.length < y.length; }
int find(int x) { return f[x] == x ? x : f[x] = find(f[x]); }
int kruscal()
{
	int ans = 0, x, y;
	for (int i = 1; i <= N; i++)f[i] = i;
	sort(rd, rd + M, cmp);
	for (int i = 0; i < M; i++)
	{
		x = find(rd[i].a);
		y = find(rd[i].b);
		if (x != y)f[x] = y, ans += rd[i].length;
	}
	for (int i = 1; i <= N; i++)find(i);
	int root = f[1];
	for (int i = 2; i <= N; i++)if (f[i] != root)ans = 0;
	return ans;
}
int main()
{
	cin >> N >> M;
	for (int i = 0; i < M; i++)cin >> rd[i].a >> rd[i].b >> rd[i].length;
	if ((sum = kruscal()) == 0)cout << "Impossible\n";
	else cout << sum << endl;
}