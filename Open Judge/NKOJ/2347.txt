#include<cstdio>
#include<vector>
#include<cstring>
#include<queue>
using namespace std;
char a[20], b[20];
vector<int>mp[200010];
bool vis[200010];
struct tree
{
	tree* next[75];
	int key = 0;
};
tree* create()
{
	tree*p = new tree;
	for (int i = 0; i < 75; i++)p->next[i] = NULL;
	return p;
}
void insert(tree* root,char* str, int k)
{
	tree* p = root;
	for (int i = 0; str[i]; i++)
	{
		if (p->next[str[i] - '0'] == NULL)p->next[str[i] - '0'] = create();
		p = p->next[str[i] - '0'];
	}
	p->key = k;
}
int search(tree* root, char* str)
{
	if (root == NULL)return 0;
	tree* p = root;
	for (int i = 0; str[i]; i++)
	{
		if (p->next[str[i] - '0'] == NULL)return 0;
		p = p->next[str[i] - '0'];
	}
	return p->key;
}
bool bfs(int x, int y)
{
	memset(vis, false, sizeof(vis));
	queue<int>q;
	q.push(x);
	vis[x] = true;
	while (!q.empty())
	{
		int c = q.front();
		for (int i = 0; i < mp[c].size(); i++)
		{
			if (mp[c][i] == y)return true;
			if (!vis[mp[c][i]])
			{
				q.push(mp[c][i]);
				vis[mp[c][i]] = true;
			}
		}
		q.pop();
	}
	return false;
}
int main()
{
	int m, n;
	scanf("%d %d", &m, &n);
	tree* root = create();
	int cnt = 1;
	while (m--)
	{
		scanf("%s is %s", a, b);
		if (!search(root, a))insert(root, a, cnt++);
		if (!search(root, b))insert(root, b, cnt++);
		mp[search(root, a)].push_back(search(root, b));
		mp[search(root, b)].push_back(search(root, a));
	}
	while (n--)
	{
		scanf("%s is %s", a, b);
		int c = search(root, a);
		int d = search(root, b);
		if (!c || !d)printf("yattaze\n");
		else if (bfs(c, d))printf("Q.E.D\n");
		else printf("yattaze\n");
	}
	return 0;
}