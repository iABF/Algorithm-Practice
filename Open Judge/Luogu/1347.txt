#include <bits/stdc++.h>

#define INF 0x7f7f7f7f
#define MAXN 27
#define MOD 80112002
#define ll long long
#define VPRINT(a, n) for(int i = 0; i < n - 1; ++i) cout << a[i] <<' '; cout << a[n - 1] << endl
#define PRINT(a) cout << a << endl
using namespace std;


int n, m, degree[MAXN] = {0}, degree_copy[MAXN], cur_num = 0;
vector<int> edge[MAXN];
string str;
bool flag = true, vis[MAXN] = {false};

bool topo(int iter) {
    queue<pair<int, int>> q;
    vector<int> res;
    int max_level = 0;
    memcpy(degree_copy, degree, sizeof(degree));
    for (int i = 0; i < n; ++i)
        if (!degree_copy[i] && vis[i]) {
            q.push(make_pair(i, 1));
            res.push_back(i);
        }
    while (!q.empty()) {
        auto pa = q.front();
        int t = pa.first, level = pa.second;
        max_level = max(max_level, level);
        q.pop();
        for (auto i: edge[t]) {
            if (!(--degree_copy[i])) {
                q.push(make_pair(i, level + 1));
                res.push_back(i);
            }
        }
    }
    if (res.size() == n && max_level == n) {
        printf("Sorted sequence determined after %d relations: ", iter);
        for (auto i: res)cout << char(i + 'A');
        cout << '.' << endl;
        return false;
    } else if (res.size() < cur_num) {
        printf("Inconsistency found after %d relations.\n", iter);
        return false;
    }
    return true;
}

int main() {
    cin >> n >> m;
    for (int i = 1; i <= m; ++i) {
        cin >> str;
        int s = str[0] - 'A', t = str[2] - 'A';
        if (!vis[s])vis[s] = true, cur_num++;
        if (!vis[t])vis[t] = true, cur_num++;
        edge[s].push_back(t);
        degree[t]++;
        if (flag)flag = topo(i);
    }
    if (flag)cout << "Sorted sequence cannot be determined." << endl;
}