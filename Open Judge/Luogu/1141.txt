#include<iostream>
#include<cstdio>
#include<string>
#include<cstring>
#include<algorithm>
#include<cmath>
#include<utility>
#include<queue>
#include<map>
#define INF 0x7fffffff
#define MAXN 30020
#define _PI 3.14159265358979323846
using namespace std;
int n, m;
bool mp[1005][1005];
int vis[1005][1005] = { 0 };
int ans[1000006];
int cnt = 1;
int sum;
int dir[4][2] = { 0,1,0,-1,1,0,-1,0 };
void bfs(int ii, int jj) {
	queue<pair<int, int>>q;
	q.push(make_pair(ii, jj));
	vis[ii][jj] = cnt;
	sum++;
	while (!q.empty()) {
		int x = q.front().first, y = q.front().second;
		q.pop();
		for (int i = 0; i < 4; i++) {
			int nx = x + dir[i][0];
			int ny = y + dir[i][1];
			if (nx <= n && ny <= n && nx > 0 && ny > 0 && !vis[nx][ny]) {
				if (mp[nx][ny] != mp[x][y]) {
					vis[nx][ny] = cnt;
					sum++;
					q.push(make_pair(nx, ny));
				}
			}
		}
	}
}
int main()
{
	cin >> n >> m;
	string s;
	for (int i = 0; i < n; i++) {
		cin >> s;
		for (int j = 1; j <= n; j++) {
			mp[i + 1][j] = s[j - 1] - '0';
		}
	}
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= n; j++) {
			if (!vis[i][j]) {
				sum = 0;
				bfs(i, j);
				ans[cnt] = sum;
				cnt++;
			}
		}
	}
	int p, q;
	for (int i = 0; i < m; i++) {
		cin >> p >> q;
		cout << ans[vis[p][q]] << endl;
	}
} 