#include <bits/stdc++.h>

#define INF 0x7f7f7f7f
#define MAXN 1000005
#define MOD 1000000007
#define BASE 69
#define _PI 3.14159265358979323846
#define ll long long
#define VPRINT(a, n) for(int i = 0; i < n - 1; ++i) cout << a[i] <<' '; cout << a[n - 1] << endl
#define PRINT(a) cout << a << endl
using namespace std;

struct edge {
    int st, ed;
} e[MAXN];

int n, m, idx[MAXN] = {0};
bool dfs_vis[MAXN] = {false, true}, bfs_vis[MAXN] = {false, true};
vector<int> dfs_res, bfs_res;
queue<int> q;

bool cmp(const edge &x, const edge &y) {
    if (x.st == y.st)return x.ed < y.ed;
    return x.st < y.st;
}

void dfs(int cur) {
    dfs_res.push_back(cur);
    if (idx[cur])
        for (int i = idx[cur]; i <= m && e[i].st == cur; ++i)
            if (!dfs_vis[e[i].ed]) {
                dfs_vis[e[i].ed] = true;
                dfs(e[i].ed);
            }
}

void bfs() {
    q.push(1);
    while (!q.empty()) {
        int cur = q.front();
        bfs_res.push_back(cur);
        q.pop();
        if (idx[cur])
            for (int i = idx[cur]; i <= m && e[i].st == cur; ++i)
                if (!bfs_vis[e[i].ed]) {
                    bfs_vis[e[i].ed] = true;
                    q.push(e[i].ed);
                }
    }
}

int main() {
    cin >> n >> m;
    for (int i = 1; i <= m; ++i)cin >> e[i].st >> e[i].ed;
    sort(e + 1, e + m + 1, cmp);
    for (int i = 1; i <= m; ++i)if (!idx[e[i].st])idx[e[i].st] = i;
    dfs(1);
    bfs();
    VPRINT(dfs_res, dfs_res.size());
    VPRINT(bfs_res, bfs_res.size());
}
