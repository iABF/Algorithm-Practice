#include<iostream>
#include<cstdio>
#include<string>
#include<cstring>
#include<algorithm>
#include<cmath>
#include<queue>
#include<map>
#define INF 0x7f7f7f7f
#define MAXN 1005
#define MOD 1000000007
#define _PI 3.14159265358979323846
using namespace std;
int n, c;
int pos[55], p[55];
int s[55] = { 0 };
int f[55][55][2] = { 0 };
int po(int x, int y) {
	return s[n] - s[y + c] + s[c - x - 1];
}
int main()
{
	cin >> n >> c;
	for (int i = 1; i <= n; i++) {
		cin >> pos[i] >> p[i];
		s[i] = s[i - 1] + p[i];
	}
	for (int i = 1; i <= c - 1; i++)f[i][0][0] = f[i - 1][0][0] + (pos[c - i + 1] - pos[c - i])*po(i - 1, 0);
	for (int i = 1; i <= n - c; i++)f[0][i][1] = f[0][i - 1][1] + (pos[c + i] - pos[c + i - 1])*po(0, i - 1);
	for (int l = 1; l <= c - 1; l++)for (int r = 1; r <= n - c; r++) {
		if (l == 1)f[l][r][0] = f[l - 1][r][1] + (pos[c + r] - pos[c - l])*po(l - 1, r);
		else f[l][r][0] = min(f[l - 1][r][0] + (pos[c - l + 1] - pos[c - l])*po(l - 1, r), f[l - 1][r][1] + (pos[c + r] - pos[c - l])*po(l - 1, r));
		if (r == 1)f[l][r][1] = f[l][r - 1][0] + (pos[c + r] - pos[c - l])*po(l, r - 1);
		else f[l][r][1] = min(f[l][r - 1][0] + (pos[c + r] - pos[c - l])*po(l, r - 1), f[l][r - 1][1] + (pos[c + r] - pos[c + r - 1])*po(l, r - 1));
	}
	if(!f[c - 1][n - c][0])cout<< f[c - 1][n - c][1] << endl;
	else if (!f[c - 1][n - c][1])cout << f[c - 1][n - c][0] << endl;
	else cout << min(f[c - 1][n - c][0], f[c - 1][n - c][1]) << endl;
}