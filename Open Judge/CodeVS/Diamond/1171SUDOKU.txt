#include<iostream>
#include<cstdio>
#include<string>
#include<cstring>
#include<algorithm>
#include<cmath>
#include<queue>
#include<map>
#define INF 0x7fffffff
#define MAXN 100010
using namespace std;
bool row[10][10], col[10][10], cell[4][4][10];
int mp[10][10], ans = 0, curnum = 0, curans = 0;
const int mpkey[10][10] = { {0,0,0,0,0,0,0,0,0,0},
					  {0,6,6,6,6,6,6,6,6,6},
					  {0,6,7,7,7,7,7,7,7,6},
					  {0,6,7,8,8,8,8,8,7,6},
					  {0,6,7,8,9,9,9,8,7,6},
					  {0,6,7,8,9,10,9,8,7,6},
					  {0,6,7,8,9,9,9,8,7,6},
					  {0,6,7,8,8,8,8,8,7,6},
					  {0,6,7,7,7,7,7,7,7,6},
					  {0,6,6,6,6,6,6,6,6,6},
};
int MinStep()
{
	int minn = 9, anss = 0, cnt;
	for (int i = 1; i < 10; i++)for (int j = 1; j < 10; j++)
	{
		if (mp[i][j])continue;
		cnt = 0;
		for (int k = 1; k < 10; k++)if (!row[i][k] && !col[j][k] && !cell[(i - 1) / 3 + 1][(j - 1) / 3 + 1][k])cnt++;
		if (cnt < minn && cnt)anss = i * 10 + j, minn = cnt;
	}
	return anss;
}
void solve()
{
	if (curnum == 81)
	{
		ans = curans > ans ? curans : ans;
		return;
	}
	int magicnum = MinStep();
	if (!magicnum)return;
	int r = magicnum / 10, c = magicnum - r * 10;
	for (int i = 1; i < 10; i++)
	{
		if (!mp[r][c] && !row[r][i] && !col[c][i] && !cell[(r - 1) / 3 + 1][(c - 1) / 3 + 1][i])
		{
			if (curans + i * mpkey[r][c] + (80 - curnum) * 81 + 9 <= ans)continue;
			curans += i * mpkey[r][c];
			curnum++;
			row[r][i] = col[c][i] = cell[(r - 1) / 3 + 1][(c - 1) / 3 + 1][i] = true;
			mp[r][c] = i;
			solve();
			row[r][i] = col[c][i] = cell[(r - 1) / 3 + 1][(c - 1) / 3 + 1][i] = false;
			curans -= i * mpkey[r][c];
			curnum--;
			mp[r][c] = 0;
		}
	}
}
void ini()
{
	for (int i = 0; i < 10; i++)for (int j = 0; j < 10; j++)row[i][j] = col[i][j] = false;
	for (int i = 0; i < 4; i++)for (int j = 0; j < 4; j++)for (int k = 0; k < 10; k++)cell[i][j][k] = false;
}
int main()
{
	ini();
	for (int i = 1; i < 10; i++)for (int j = 1; j < 10; j++)
	{
		cin >> mp[i][j];
		if (mp[i][j])
		{
			curnum++;
			curans += mp[i][j] * mpkey[i][j];
			row[i][mp[i][j]] = true;
			col[j][mp[i][j]] = true;
			cell[(i - 1) / 3 + 1][(j - 1) / 3 + 1][mp[i][j]] = true;
		}
	}
	solve();
	if (ans)cout << ans << endl;
	else cout << -1 << endl;
}