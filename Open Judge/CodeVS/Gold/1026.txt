#include<iostream>
#include<cstdio>
#include<string>
#include<cstring>
#include<algorithm>
#include<cmath>
#include<queue>
using namespace std;
int r, c, sr, sc, n, dir[1005], nexxt[4][2] = { -1,0,0,1,1,0,0,-1 };
char mp[55][55], dirr[10];
bool vis[55][55][1005];
struct ed
{
	int x, y, step;
	ed(int xx, int yy, int zz) { x = xx, y = yy, step = zz; }
};
bool check(int cc, int rr)
{
	if (cc<1 || rr<1 || cc>r || rr>c)return false;
	if (mp[cc][rr] == 'X')return false;
	return true;
}
void bfs()
{
	queue<ed>q;
	q.push(ed(sr, sc, 0));
	vis[sr][sc][0] = true;
	int nc, nr, thisc, thisr, sss;
	while (!q.empty())
	{
		if (q.front().step == n)
		{
			mp[q.front().x][q.front().y] = '*';
			q.pop();
			continue;
		}
		thisr = q.front().x + nexxt[dir[q.front().step]][0];
		thisc = q.front().y + nexxt[dir[q.front().step]][1];
		sss = q.front().step;
		while (check(thisr, thisc))
		{
			if (!vis[thisr][thisc][sss + 1])
			{
				q.push(ed(thisr, thisc, sss + 1));
				vis[thisr][thisc][sss + 1] = true;
			}
			thisr += nexxt[dir[q.front().step]][0];
			thisc += nexxt[dir[q.front().step]][1];
		}
		q.pop();
	}
}
int main()
{
	cin >> r >> c;
	memset(vis, false, sizeof(vis));
	for (int i = 1; i <= r; i++)for (int j = 1; j <= c; j++)
	{
		cin >> mp[i][j];
		if (mp[i][j] == '*')sr = i, sc = j, mp[i][j] = '.';
	}
	cin >> n;
	for (int i = 0; i < n; i++)
	{
		scanf("%s", dirr);
		if (dirr[0] == 'N')dir[i] = 0;
		if (dirr[0] == 'E')dir[i] = 1;
		if (dirr[0] == 'S')dir[i] = 2;
		if (dirr[0] == 'W')dir[i] = 3;
	}
	bfs();
	for (int i = 1; i <= r; i++)
	{
		for (int j = 1; j <= c; j++)cout << mp[i][j];
		cout << endl;
	}
}