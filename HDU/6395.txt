#include <bits/stdc++.h>

#define INF 0x7f7f7f7f
#define MAXN 10005
#define MOD 1000000007
#define ll long long

using namespace std;

struct Matrix {
    ll m[3][3] = {0};

    Matrix(const Matrix &x) {
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                this->m[i][j] = x.m[i][j];
    }

    explicit Matrix(const int a[9]) {
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                this->m[i][j] = a[i * 3 + j];
    }

    Matrix() = default;
};

struct Ans {
    ll F;
    ll G;

    Ans(ll f, ll g) : F(f), G(g) {}
};


void matrix_times(const Matrix *x, Matrix *y) {
    ll tmp[3][3] = {0};
    for (int i = 0; i < 3; ++i)
        for (int k = 0; k < 3; ++k)
            for (int j = 0; j < 3; ++j)
                tmp[i][j] = (tmp[i][j] + x->m[i][k] * y->m[k][j]) % MOD;
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            y->m[i][j] = tmp[i][j];
};

void matrix_square(Matrix *x) {
    ll tmp[3][3] = {0};
    for (int i = 0; i < 3; ++i)
        for (int k = 0; k < 3; ++k)
            for (int j = 0; j < 3; ++j)
                tmp[i][j] = (tmp[i][j] + x->m[i][k] * x->m[k][j]) % MOD;
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            x->m[i][j] = tmp[i][j];
}

void quick_matrix_pow(Matrix *x, int exp, Matrix *ret) {
    auto base = Matrix(*x);
    while (exp) {
        if (exp & 1)matrix_times(&base, ret);
        exp >>= 1;
        matrix_square(&base);
    }
}

void left_times(const Matrix *x, Ans *y) {
    ll f = ((x->m[0][0] * y->F) % MOD + (x->m[0][1] * y->G) % MOD + x->m[0][2]) % MOD;
    y->G = y->F;
    y->F = f;
}

int main() {
    int T, nxt;
    cin >> T;
    while (T--) {
        int A, B, C, D, P, n;
        cin >> A >> B >> C >> D >> P >> n;
        int ini[9] = {D, C, 0, 1, 0, 0, 0, 0, 1};
        int test[9] = {1, 0, 0, 0, 1, 0, 0, 0, 1};
        auto mtx = new Matrix(ini);
        auto ans = new Ans(B, A);
        auto sum = new Matrix(test);
        if (n < 3) {
            if (n == 1)cout << A << endl;
            else cout << B << endl;
            continue;
        }
        for (int i = 3; i <= n;) {
            int k = P / i;
            mtx->m[0][2] = k;
            if (k)nxt = min(P / k + 1, n + 1);
            else nxt = n + 1;
            int cnt = nxt - i;
            i = nxt;
            auto tmp = new Matrix(test);
            quick_matrix_pow(mtx, cnt, tmp);
            matrix_times(tmp, sum);
        }
        left_times(sum, ans);
        cout << ans->F << endl;
    }
}