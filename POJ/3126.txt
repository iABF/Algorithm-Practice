#include<iostream>
#include<cstring>
#include<queue>
using namespace std;
bool prime[11000];
bool vis[11000];
int step[11000];
bool primecheck(int n)
{
	if (n == 1)return false;
	for (int i = 2; i < n; i++)if (n%i == 0)return false;
	return true;
}
int casenum, s, e;
int bfs()
{
	memset(vis, false, sizeof(vis));
	memset(step, 0, sizeof(step));
	queue<int>q;
	q.push(s);
	vis[s] = true;
	while (!q.empty())
	{
		int t = q.front();
		if (t == e)return step[t];
		q.pop();
		for (int i = 1; i < 10; i++)
		{
			int nt = t - (t / 1000) * 1000 + 1000 * i;
			if (nt != t&&prime[nt] && !vis[nt])
			{
				q.push(nt);
				vis[nt] = true;
				step[nt] = step[t] + 1;
			}
		}
		for (int i = 0; i < 10; i++)
		{
			int nt = t - ((t % 1000) / 100) * 100 + 100 * i;
			if (nt != t&&prime[nt] && !vis[nt])
			{
				q.push(nt);
				vis[nt] = true;
				step[nt] = step[t] + 1;
			}
		}
		for (int i = 0; i < 10; i++)
		{
			int nt = t - ((t % 100) / 10) * 10 + 10 * i;
			if (nt != t&&prime[nt] && !vis[nt])
			{
				q.push(nt);
				vis[nt] = true;
				step[nt] = step[t] + 1;
			}
		}
		for (int i = 1; i < 10; i += 2)
		{
			int nt = (t / 10) * 10 + i;
			if (nt != t&&prime[nt] && !vis[nt])
			{
				q.push(nt);
				vis[nt] = true;
				step[nt] = step[t] + 1;
			}
		}
	}
	return 0;
}
int main()
{
	cin >> casenum;
	for (int i = 1000; i < 10000; i++)if (primecheck(i))prime[i] = true;
	while (casenum--)
	{
		cin >> s >> e;
		cout << bfs() << endl;
	}
}