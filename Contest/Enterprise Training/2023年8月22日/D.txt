#include <bits/stdc++.h>

#define INF 0x7f7f7f7f
#define MAXN 505
#define MOD 1000000007
#define ll long long

using namespace std;

int n, m, k, t1, t2;
vector<pair<int, int>> bomb;
pair<int, int> start, endd;
bool vis[MAXN][MAXN];
int nxt[4][2] = {-1, 0, 1, 0, 0, -1, 0, 1};

bool safe(int x, int y, int dis) {
    for (auto b: bomb)if (abs(b.first - x) + abs(b.second - y) < dis)return false;
    return true;
}

bool inside(int x, int y) {
    if (x < 1 || x > n)return false;
    if (y < 1 || y > m)return false;
    return true;
}

bool check(int dis) {
    if (!safe(endd.first, endd.second, dis))return false;
    if (!safe(start.first, start.second, dis))return false;
    queue<pair<int, int>> q;
    memset(vis, false, sizeof(vis));
    vis[start.first][start.second] = true;
    q.push(start);
    while (!q.empty()) {
        auto c = q.front();
        q.pop();
        if (c == endd)return true;
        for (auto &i: nxt) {
            int nx = c.first + i[0], ny = c.second + i[1];
            if (inside(nx, ny) && !vis[nx][ny] && safe(nx, ny, dis)) {
                q.push(make_pair(nx, ny));
                vis[nx][ny] = true;
            }
        }
    }
}

int main() {
    cin >> n >> m >> k;
    for (int i = 0; i < k; ++i) {
        cin >> t1 >> t2;
        bomb.emplace_back(t1, t2);
    }
    cin >> t1 >> t2;
    start.first = t1, start.second = t2;
    cin >> t1 >> t2;
    endd.first = t1, endd.second = t2;
    int l = 0, r = n + m - 2;
    while (l < r) {
        int mid = (l + r + 1) >> 1;
        if (check(mid))l = mid;
        else r = mid - 1;
    }
    cout << r << endl;
}


// 开始时间：2023年8月22日16:11:10
// 完成时间：2023年8月22日16:35:54
// 耗时：24:44

// 思路：二分查找距离最小值，每次check过程是一次BFS，时间复杂度O(nmlog(n+m))？