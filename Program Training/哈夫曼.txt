1.问题的解释【这个问题就是给你一堆字符的出现频率，让你给每个字符进行编码（二进制代码），使得这些编码没有任何一个是任何另一个的前缀，并且Σ（编码长度*字符频率）最小】
2.问题的解决【将字符按频率从大到小排序，让频率更高的字符的编码长度更小。每次合并两个最大频率的字符，组成一个树节点。最后按树的结构来分配0和1，比如左支是0，右支是1。】
3.代码实现【可以用一个优先队列存储节点，每次出列最大的即可，比较容易实现】
#include<iostream>
#include<queue>
using namespace std;
int n;
char c;
int cur;
int alp[30];
struct Node
{
	int p;
	bool bit = 0;
	bool isroot = false;
	char c;
	Node*l;
	Node*r;
	Node() {}
	Node(int xx, char cc = NULL) :p(xx), c(cc) {  }
}node[30];
bool operator<(Node a, Node b)
{
	return a.p < b.p;
}
int tobin(int x)
{
	int ans = 0;
	int p = 1;
	while (x)
	{
		ans += (x % 2)*p;
		p *= 10;
	}
	return ans;
}
void dfs(Node* root,int d)
{
	if (!root)return;
	if (!root->r && !root->l)
	{
		alp[root->c - 'a'] = tobin(d);
		return;
	}
	if (root->l)root->l->bit = 0;
	if (root->r)root->r->bit = 1;
	dfs(root->l, d * 2 + root->bit);
	dfs(root->r, d * 2 + root->bit);
}
int main()
{
	cin >> n;
	priority_queue<Node>q;
	for (int i = 0; i < n; i++)
	{
		cin >> c >> cur;
		node[i].p = cur;
		node[i].c = c;
		q.push(node[i]);
	}
	Node* father = NULL;
	while (q.size() > 1)
	{		father = NULL;
		Node x = q.top();
		q.pop();
		Node y = q.top();
		q.pop();
		father = new Node(x.p + y.p);
		father->l = &x;
		father->r = &y;
		q.push(*father);

	}
	father->isroot = true;
	dfs(father, 0);
	for (int i = 0; i < 26; i++)
	{
		if (alp[i])cout << (char)(i + 'a') << ' ' << alp[i] << endl;
	}
}