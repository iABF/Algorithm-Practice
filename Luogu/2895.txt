#include <bits/stdc++.h>

#define INF 0x7f7f7f7f
#define MAXN 1205
#define MOD 10000
#define _PI 3.14159265358979323846
#define ll long long
using namespace std;

int m, mp[MAXN][MAXN] = {0}, xx, yy, tt, ans = -1;
int dir[5][2] = {{0,  1},
                 {1,  0},
                 {-1, 0},
                 {0,  -1},
                 {0,  0}};
bool vis[MAXN][MAXN] = {true};

struct step {
    int x, y, t;

    step(int xxx, int yyy, int ttt) : x(xxx), y(yyy), t(ttt) {}
};

bool in_map(int x, int y) {
    return x >= 0 && y >= 0;
}


void bfs() {
    queue<step> q;
    q.push(step(0, 0, 0));
    while (!q.empty()) {
        step tmp = q.front();
        q.pop();
        int x = tmp.x, y = tmp.y, t = tmp.t;
        if (mp[x][y] < 0) {
            ans = t;
            return;
        }
        for (int i = 0; i < 4; ++i) {
            int nx = x + dir[i][0], ny = y + dir[i][1], nt = t + 1;
            if (in_map(nx, ny) && !vis[nx][ny] && (mp[nx][ny] < 0 || nt < mp[nx][ny])) {
                vis[nx][ny] = true;
                q.push(step(nx, ny, nt));
            }
        }
    }
}


int main() {
    cin >> m;
    memset(mp, -1, sizeof(mp));
    for (int i = 0; i < m; ++i) {
        cin >> xx >> yy >> tt;
        for (auto &j: dir) {
            int nx = xx + j[0], ny = yy + j[1];
            if (in_map(nx, ny)) {
                if (mp[nx][ny] >= 0)mp[nx][ny] = min(mp[nx][ny], tt);
                else mp[nx][ny] = tt;
            }
        }
    }
    bfs();
    cout << ans << endl;
}
