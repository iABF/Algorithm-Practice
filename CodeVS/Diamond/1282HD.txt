#include<iostream>
#include<cstdio>
#include<string>
#include<cstring>
#include<algorithm>
#include<cmath>
#include<queue>
#include<map>
#define INF 1000000000
#define MAXN 30005
using namespace std;
int tree[MAXN << 2], ADD[MAXN << 2], n, m, x, Q, ans;
void Pushup(int index)
{
	tree[index] = tree[index << 1] + tree[index << 1 | 1];
}
void Build(int l, int r, int index)
{
	if (l == r)
	{
		tree[index] = 1;
		return;
	}
	int m = (l + r) >> 1;
	Build(l, m, index << 1);
	Build(m + 1, r, index << 1 | 1);
	Pushup(index);
}
void Pushdown(int index, int ln, int rn)
{
	if (ADD[index])
	{
		ADD[index << 1] += ADD[index];
		ADD[index << 1 | 1] += ADD[index];
		tree[index << 1] += ADD[index] * ln;
		tree[index << 1 | 1] += ADD[index] * rn;
		ADD[index] = 0;
	}
}
void Update(int DES, int l, int r, int index)
{
	if (l == r)
	{
		tree[index] = 0;
		return;
	}
	int m = (l + r) >> 1;
	if (DES <= m)Update(DES, l, m, index << 1);
	else Update(DES, m + 1, r, index << 1 | 1);
	Pushup(index);
}
int Query(int DES, int l, int r, int index)
{
	if (l == r)return l;
	int m = (l + r) >> 1;
	Pushdown(index, m - 1 - l, r - m);
	if (DES <= tree[index << 1])return Query(DES, l, m, index << 1);
	else return Query(DES - tree[index << 1], m + 1, r, index << 1 | 1);
}
int main()
{
	cin >> n >> m;
	Build(1, n, 1);
	int k = 0;
	for (int i = n; i > 1; i--)
	{
		int j = (k + m - 1) % i;//escape "0"_Disaster
		cout << (ans = Query(j + 1, 1, n, 1)) << ' ';
		Update(ans, 1, n, 1);
		k = j % (i - 1);
	}
	cout << Query(1, 1, n, 1) << endl;
}