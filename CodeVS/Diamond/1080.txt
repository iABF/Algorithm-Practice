#include<iostream>
#include<cstdio>
#include<string>
#include<cstring>
#include<algorithm>
#include<cmath>
#include<queue>
#include<map>
#define INF 1000000000
#define MAXN 100007
using namespace std;
int tree[MAXN << 2], ADD[MAXN << 2], a[MAXN], n, x, Q, q, w, e;
void Pushup(int index)
{
	tree[index] = tree[index << 1] + tree[index << 1 | 1];
}
void Build(int l, int r, int index)
{
	if (l == r)
	{
		tree[index] = a[l];
		return;
	}
	int m = (l + r) >> 1;
	Build(l, m, index << 1);
	Build(m + 1, r, index << 1 | 1);
	Pushup(index);
}
void Pushdown(int index, int ln, int rn)
{
	if (ADD[index])
	{
		ADD[index << 1] += ADD[index];
		ADD[index << 1 | 1] += ADD[index];
		tree[index << 1] += ADD[index] * ln;
		tree[index << 1 | 1] += ADD[index] * rn;
		ADD[index] = 0;
	}
}
void Update(int L, int R, int l, int r, int index)
{
	if (L <= l&&R >= r)
	{
		ADD[index] += x;
		tree[index] += x*(r - l + 1);
		return;
	}
	int m = (l + r) >> 1;
	Pushdown(index, m - l + 1, r - m);
	if (L <= m)Update(L, R, l, m, index << 1);
	if (R >= m + 1)Update(L, R, m + 1, r, index << 1 | 1);
	Pushup(index);
}
void Update(int DES, int l, int r, int index)
{
	if (l == r)
	{
		tree[index] += x;
		return;
	}
	int m = (l + r) >> 1;
	if (DES <= m)Update(DES, l, m, index << 1);
	else Update(DES, m + 1, r, index << 1 | 1);
	Pushup(index);
}
int Query(int L, int R, int l, int r, int index)
{
	if (r <= R&&l >= L)return tree[index];
	int m = (r + l) >> 1;
	Pushdown(index, m - l + 1, r - m);
	int ans = 0;
	if (L <= m)ans += Query(L, R, l, m, index << 1);
	if (R >= m + 1)ans += Query(L, R, m + 1, r, index << 1 | 1);
	return ans;
}
int main()
{
	cin >> n;
	for (int i = 1; i <= n; i++)cin >> a[i];
	Build(1, n, 1);
	cin >> Q;
	while (Q--)
	{
		cin >> q;
		if (q == 1)
		{
			cin >> w >> x;
			Update(w, 1, n, 1);
		}
		else
		{
			cin >> w >> e;
			cout << Query(w, e, 1, n, 1) << endl;
		}
	}
}