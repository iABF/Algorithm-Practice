#include<iostream>
#include<cstdio>
#include<string>
#include<cstring>
#include<algorithm>
#include<cmath>
#include<queue>
#include<map>
using namespace std;
int n, m;
int mp[100][100];
const int ten[4] = { 1,10,100,1000 };
const int maxl = 100;
struct BigNumber
{
	int d[maxl];
	BigNumber(string s)
	{
		int len = s.size();
		d[0] = (len - 1) / 4 + 1;
		int i, j, k;
		for (i = 1; i < maxl; ++i)d[i] = 0;
		for (i = len - 1; i >= 0; --i)
		{
			j = (len - i - 1) / 4 + 1;
			k = (len - i - 1) % 4;
			d[j] += ten[k] * (s[i] - '0');
		}
		while (d[0] > 1 && d[d[0]] == 0)--d[0];
	}
	BigNumber() { *this = BigNumber(string("0")); }
	string toString()
	{
		string s("");
		int i, j, temp;
		for (i = 3; i >= 1; --i)if (d[d[0]] >= ten[i])break;
		temp = d[d[0]];
		for (j = i; j >= 0; --j)
		{
			s = s + (char)(temp / ten[j] + '0');
			temp %= ten[j];
		}
		for (i = d[0] - 1; i > 0; --i)
		{
			temp = d[i];
			for (j = 3; j >= 0; --j)
			{
				s = s + (char)(temp / ten[j] + '0');
				temp %= ten[j];
			}
		}
		return s;
	}
};
BigNumber operator+(const BigNumber &a, const BigNumber &b)
{
	BigNumber c;
	c.d[0] = max(a.d[0], b.d[0]);
	int i, x = 0;
	for (i = 1; i <= c.d[0]; ++i)
	{
		x = a.d[i] + b.d[i] + x;
		c.d[i] = x % 10000;
		x /= 10000;
	}
	while (x != 0)
	{
		c.d[++c.d[0]] = x % 10000;
		x /= 10000;
	}
	return c;
}
BigNumber operator*(const BigNumber &a, const BigNumber &b)
{
	BigNumber c;
	c.d[0] = a.d[0] + b.d[0];
	int i, j, x;
	for (i = 1; i <= a.d[0]; ++i)
	{
		x = 0;
		for (j = 1; j <= b.d[0]; ++j)
		{
			x = a.d[i] * b.d[i] + x + c.d[i + j - 1];
			c.d[i + j - 1] = x % 10000;
			x /= 10000;
		}
		c.d[i + b.d[0]] = x;
	}
	while ((c.d[0] > 1) && (c.d[c.d[0]] == 0))--c.d[0];
	return c;
}
BigNumber operator*(const BigNumber &a, const int &k)
{
	BigNumber c;
	c.d[0] = a.d[0];
	int i, x = 0;
	for (i = 1; i <= a.d[0]; ++i)
	{
		x = a.d[i] * k + x;
		c.d[i] = x % 10000;
		x /= 10000;
	}
	while (x > 0)
	{
		c.d[++c.d[0]] = x % 10000;
		x /= 10000;
	}
	while ((c.d[0] > 1) && (c.d[c.d[0]] == 0))--c.d[0];
	return c;
}
bool operator<(const BigNumber &a, const BigNumber &b)
{
	if (a.d[0] != b.d[0])return a.d[0] < b.d[0];
	int i;
	for (i = a.d[0]; i > 0; --i)if (a.d[i] != b.d[i])return a.d[i] < b.d[i];
	return false;
}

BigNumber dp[100][100], two[80],ans;

int main()
{
	cin >> n >> m;
	BigNumber one(string("1"));
	two[1] = one * 2;
	for (int j = 2; j <= m; j++)two[j] = two[j - 1] * 2;
	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= m; j++)cin >> mp[i][j];
		for (int j = 1; j <= m; j++)dp[j][j] = two[m] * mp[i][j];
		for (int k = m; k >= 1; k--)
		{
			for (int j = k + 1; j <= m; j++)
			{
				BigNumber l = two[m - (j - k)] * mp[i][k];
				BigNumber r = two[m - (j - k)] * mp[i][j];
				if (dp[k + 1][j] + l < dp[k][j - 1] + r)dp[k][j] = dp[k][j - 1] + r;
				else dp[k][j] = dp[k + 1][j] + l;
			}
		}
		ans = ans + dp[1][m];
	}
	cout << ans.toString() << endl;
}